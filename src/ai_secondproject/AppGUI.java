/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ai_secondproject;
import java.awt.Canvas;
import java.awt.Frame;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.math.BigDecimal;
import javax.swing.JPanel;

/**
 *
 * @author hayamikkawi
 */
public class AppGUI extends javax.swing.JFrame {
boolean check = false;
double [] weights; 
double theta; 
Perceptron perceptron ; 
Multilayer m ; 
    /**
     * Creates new form AppGUI
     */
    public AppGUI() {
         
        initComponents();

    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logicGates = new javax.swing.JComboBox<>();
        learnButton = new javax.swing.JButton();
        jPanelOr = new javax.swing.JPanel();
        jPanelXor = new javax.swing.JPanel();
        jPanelAnd = new javax.swing.JPanel();
        jPanelXnor = new javax.swing.JPanel();
        jPanelNor = new javax.swing.JPanel();
        jPanelNand = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        epochs = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        input1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        input2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        output = new javax.swing.JLabel();
        test = new javax.swing.JButton();
        maxEpochs = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logicGates.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NOT", "AND", "NAND", "OR", "NOR", "XOR", "XNOR" }));

        learnButton.setText("Learn");
        learnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelOrLayout = new javax.swing.GroupLayout(jPanelOr);
        jPanelOr.setLayout(jPanelOrLayout);
        jPanelOrLayout.setHorizontalGroup(
            jPanelOrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelOrLayout.setVerticalGroup(
            jPanelOrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelXorLayout = new javax.swing.GroupLayout(jPanelXor);
        jPanelXor.setLayout(jPanelXorLayout);
        jPanelXorLayout.setHorizontalGroup(
            jPanelXorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 227, Short.MAX_VALUE)
        );
        jPanelXorLayout.setVerticalGroup(
            jPanelXorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 209, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelAndLayout = new javax.swing.GroupLayout(jPanelAnd);
        jPanelAnd.setLayout(jPanelAndLayout);
        jPanelAndLayout.setHorizontalGroup(
            jPanelAndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );
        jPanelAndLayout.setVerticalGroup(
            jPanelAndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelXnorLayout = new javax.swing.GroupLayout(jPanelXnor);
        jPanelXnor.setLayout(jPanelXnorLayout);
        jPanelXnorLayout.setHorizontalGroup(
            jPanelXnorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelXnorLayout.setVerticalGroup(
            jPanelXnorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelNorLayout = new javax.swing.GroupLayout(jPanelNor);
        jPanelNor.setLayout(jPanelNorLayout);
        jPanelNorLayout.setHorizontalGroup(
            jPanelNorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 226, Short.MAX_VALUE)
        );
        jPanelNorLayout.setVerticalGroup(
            jPanelNorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelNandLayout = new javax.swing.GroupLayout(jPanelNand);
        jPanelNand.setLayout(jPanelNandLayout);
        jPanelNandLayout.setHorizontalGroup(
            jPanelNandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelNandLayout.setVerticalGroup(
            jPanelNandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("Number of epochs=");

        jLabel2.setText("Enter input1:");

        jLabel3.setText("Enter input2:");

        jLabel4.setText("output:");

        test.setText("Test");
        test.setEnabled(false);
        test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testActionPerformed(evt);
            }
        });

        jLabel5.setText("Maximum number of epochs:");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logicGates, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(learnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxEpochs, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(epochs, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelAnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelNand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanelNor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanelOr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(22, 22, 22)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanelXor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanelXnor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(test, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(input1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(input2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(output, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(94, 94, 94)))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(logicGates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxEpochs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(input2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(learnButton)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(epochs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(25, 25, 25))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(test)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelXor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelOr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelAnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelXnor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelNor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelNand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void learnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learnButtonActionPerformed
        // TODO add your handling code here:
        int selectedGate = logicGates.getSelectedIndex(); 
        //jPanel1.removeAll();
        //jPanel1.updateUI();
        switch(selectedGate){
            case 0 : perceptron = new Perceptron("not",Integer.parseInt(maxEpochs.getText()));
                     notGate(); 
                     break; 
            case 1 : 
                perceptron = new Perceptron("and",Integer.parseInt(maxEpochs.getText()));
                andGate(); 
                break;
            case 2 : 
                perceptron = new Perceptron("nand",Integer.parseInt(maxEpochs.getText()));
                nandGate(); 
                     break; 
            case 3 : 
                perceptron = new Perceptron("or",Integer.parseInt(maxEpochs.getText()));
                orGate(); 
                     break;          
            case 4 : 
                perceptron = new Perceptron("nor",Integer.parseInt(maxEpochs.getText()));
                norGate(); 
                     break; 
            case 5 : 
                xorGate(); 
                     break;
            case 6 : 
                xnorGate(); 
                     break;          
        
        }
        this.test.setEnabled(true);
        
    }//GEN-LAST:event_learnButtonActionPerformed

    private void testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testActionPerformed
        int s = this.logicGates.getSelectedIndex();
        if(s>=0 && s<=4){
            try{
            int x1 = Integer.parseInt(input1.getText());
            int x2 = Integer.parseInt(input2.getText());
            int o =this.perceptron.y(x1, x2);
            output.setText(o+"");
            }
            catch(Exception e){
            output.setText("Invalid inputs");

            }
        }
        else if (s==5 || s==6){
            try{
            int x1 = Integer.parseInt(input1.getText());
            int x2 = Integer.parseInt(input2.getText());
            double o =this.m.y(x1, x2);
            output.setText(o+"");
            }
            catch(Exception e){
            output.setText("Invalid inputs");

            }
        }
    }//GEN-LAST:event_testActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppGUI().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel epochs;
    private javax.swing.JTextField input1;
    private javax.swing.JTextField input2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanelAnd;
    private javax.swing.JPanel jPanelNand;
    private javax.swing.JPanel jPanelNor;
    private javax.swing.JPanel jPanelOr;
    private javax.swing.JPanel jPanelXnor;
    private javax.swing.JPanel jPanelXor;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton learnButton;
    private javax.swing.JComboBox<String> logicGates;
    public static javax.swing.JTextField maxEpochs;
    private javax.swing.JLabel output;
    private javax.swing.JButton test;
    // End of variables declaration//GEN-END:variables

    private void notGate() {
    //  Perceptron perceptron=new Perceptron("not");
      perceptron.initialize();
      perceptron.activate();
      //perceptron.getWeights();
    }

    private void andGate() {
     // Perceptron perceptron=new Perceptron("and");
      perceptron.initialize();
      perceptron.activate();
      double [] p = perceptron.getPoints();
      System.out.println("points:"+p[0]+"  "+p[1]);
      drawCoordinates(jPanelAnd);
      drawPoints("and"); 
      drawLine(p, jPanelAnd);
      epochs.setText(perceptron.getNumberOfEpochs()+"");
     // revalidate();
      //repaint();
      


     // DrawShapesExample d = new DrawShapesExample(); 
//      check = true; 
//      repaint();
    }

    private void nandGate() {
     // Perceptron perceptron=new Perceptron("nand");
      perceptron.initialize();
      perceptron.activate();
      double [] p = perceptron.getPoints();
      System.out.println("points:"+p[0]+"  "+p[1]);
      drawCoordinates(jPanelNand);
      drawPoints("nand"); 
      drawLine(p,jPanelNand );
      epochs.setText(perceptron.getNumberOfEpochs()+"");

    }

    private void orGate() {
     // Perceptron perceptron=new Perceptron("or");
      perceptron.initialize();
      perceptron.activate();
      double [] p = perceptron.getPoints();
      System.out.println("points:"+p[0]+"  "+p[1]);
      drawCoordinates(jPanelOr);
      drawPoints("or"); 
      drawLine(p, jPanelOr);
      epochs.setText(perceptron.getNumberOfEpochs()+"");
    }

    private void norGate() {
    //  Perceptron perceptron=new Perceptron("nor");
      perceptron.initialize();
      perceptron.activate();
      perceptron.activate();
      double [] p = perceptron.getPoints();
      System.out.println("points:"+p[0]+"  "+p[1]);
      drawCoordinates(jPanelNor);
      drawPoints("nor"); 
      drawLine(p, jPanelNor);
      epochs.setText(perceptron.getNumberOfEpochs()+"");
    }
    
    private void xorGate() {
        double[][] dataset = { {0,0,0}, {0,1.0,1.0},{1.0,0,1.0},{1.0,1.0,0} };
        m=new Multilayer(dataset,Integer.parseInt(maxEpochs.getText()));
        m.initialize();
        m.activate();
        
        double [] p1 = m.getPoints(1);
        double [] p2 = m.getPoints(2);
        System.out.println("points:"+p1[0]+"  "+p1[1]);
        drawCoordinates1(jPanelXor);
        drawPoints("xor"); 
        drawLine1(p1, jPanelXor);
        drawLine1(p2, jPanelXor);
        epochs.setText(m.getNumberOfEpochs()+"");
    }

    private void xnorGate() {
        double[][] dataset = { {0,0,1.0}, {0,1.0,0},{1.0,0,0},{1.0,1.0,1} };
        m=new Multilayer(dataset,Integer.parseInt(maxEpochs.getText()));
        m.initialize();
        m.activate();
        
        double [] p1 = m.getPoints(1);
        double [] p2 = m.getPoints(2);
        System.out.println("points:"+p1[0]+"  "+p1[1]);
        drawCoordinates1(jPanelXnor);
        drawPoints("xnor"); 
        drawLine1(p1, jPanelXnor);
        drawLine1(p2, jPanelXnor);
        epochs.setText(m.getNumberOfEpochs()+"");

    }

    private void drawCoordinates(JPanel jp) {
      Graphics g = jp.getGraphics();
      int h = jp.getSize().height; 
      int w = jp.getSize().width; 
      g.drawLine(3, 3,3,h-3);
      g.drawLine(3, h-3,w, h-3);
    }
       private void drawCoordinates1(JPanel jp) {
      Graphics g = jp.getGraphics();
      int h = jp.getSize().height; 
      int w = jp.getSize().width; 
      g.drawLine(w/2 , 3,w/2,h-3);
      g.drawLine(3, h/2,w, h/2);
    }

    private void drawPoints(String op) {

        if(op.equalsIgnoreCase("and")){
        Graphics g = this.jPanelAnd.getGraphics();
        int h = jPanelAnd.getSize().height;
         g.setColor(Color.yellow);

        // 0,0
        g.fillOval(0,h-6,6,6);
        //1,0
        g.fillOval(100,h-6,6,6);
        //0,1
        g.fillOval(0,h-6-100,6,6);
        g.setColor(Color.red);
        // 1,1
        g.fillOval(100,h-6-100,6,6);
        }
        else if (op.equalsIgnoreCase("nand")){
           Graphics g = this.jPanelNand.getGraphics();
           int h = jPanelNand.getSize().height;
           g.setColor(Color.red);
           // 0,0
           g.fillOval(0,h-6,6,6);
           //1,0
           g.fillOval(100,h-6,6,6);
           //0,1
           g.fillOval(0,h-6-100,6,6);
           g.setColor(Color.yellow);
          // 1,1
           g.fillOval(100,h-6-100,6,6);
        }
            else if (op.equalsIgnoreCase("or")){
           Graphics g = this.jPanelOr.getGraphics();
           int h = jPanelOr.getSize().height;
           g.setColor(Color.yellow);
           // 0,0
           g.fillOval(0,h-6,6,6);
            g.setColor(Color.red);
           //1,0
           g.fillOval(100,h-6,6,6);
           //0,1
           g.fillOval(0,h-6-100,6,6);
          
          // 1,1
           g.fillOval(100,h-6-100,6,6);
        }
           else if (op.equalsIgnoreCase("nor")){
           Graphics g = this.jPanelNor.getGraphics();
           int h = jPanelNor.getSize().height;
           g.setColor(Color.red);
           // 0,0
           g.fillOval(0,h-6,6,6);
            g.setColor(Color.yellow);
           //1,0
           g.fillOval(100,h-6,6,6);
           //0,1
           g.fillOval(0,h-6-100,6,6);
          
          // 1,1
           g.fillOval(100,h-6-100,6,6);
        }
        
        else if (op.equalsIgnoreCase("xor")){
           Graphics g = this.jPanelXor.getGraphics();
           int h = jPanelXor.getSize().height;
           int w = jPanelXor.getSize().width;
           g.setColor(Color.yellow);
           // 0,0
           g.fillOval(w/2 -2,h/2 -2,4,4);
            g.setColor(Color.red);
           //1,0
           g.fillOval(w/2 -2+20,h/2 -2,4,4);
           //0,1
           g.fillOval(w/2 -2,h/2 -2-20,4,4);
          g.setColor(Color.yellow);
          // 1,1
           g.fillOval(w/2 -2+20,h/2 -2-20,4,4);
        }
        
        else if (op.equalsIgnoreCase("xnor")){
           Graphics g = this.jPanelXnor.getGraphics();
           int h = jPanelXnor.getSize().height;
           int w = jPanelXor.getSize().width;
           g.setColor(Color.red);
           // 0,0
           g.fillOval(w/2 -2,h/2 -2,4,4);
            g.setColor(Color.yellow);
           //1,0
            g.fillOval(w/2 -2+20,h/2 -2,4,4);
           //0,1
           g.fillOval(w/2 -2,h/2 -2-20,4,4);
           g.setColor(Color.red);
          // 1,1
           g.fillOval(w/2 -2+20,h/2 -2-20,4,4);
        }


    }

    private void drawLine(double[] p, JPanel j) {
       Graphics g =j.getGraphics();
       int h = j.getSize().height;
       g.drawLine((int)p[0], h,3,h-(int) p[1]);


    }
        private void drawLine1(double[] p, JPanel j) {
       Graphics g =j.getGraphics();
       int h = j.getSize().height;
       int w = j.getSize().width;
       g.drawLine(w/2 + (int)p[0], h/2 , w/2,h/2 -(int) p[1]);
       


    }

}
//class myCanvas extends Canvas{
//    public void paint(Graphics g){
//        g.fillRect(50, 50, 100, 25);
//        g.drawLine(5, 5, 100, 100);
//    }
//    
//}








